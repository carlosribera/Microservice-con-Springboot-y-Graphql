scalar Date @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")
scalar Url @specifiedBy(url: "https://www.w3.org/Addressing/URL/url-spec.txt")

type Query {
  getAllUsers: [Usuario]

  getAllProducts: [Product]
  getProductById(id: ID!): Product

  getAllPurchases: [Purchase]
  getPurchaseById(id: ID): Purchase

  getAllDetailPurchases: [DetailPurchase]
  getDetailPurchaseById(id: ID): DetailPurchase

  getAllSuppliers: [Supplier]
  getSupplierById(id: ID): Supplier

  getClientById(id: ID!): Client
  getAllClients: [Client]

  getSaleById(id: ID!): Sale
  getAllSales: [Sale]

  getWarehouseById(id: ID!): Warehouse
  getAllWarehouses: [Warehouse]

  getSaleDetailById(id: ID!): SaleDetail
  getAllSaleDetails: [SaleDetail]

  getOrderOfWorkById(id: ID!): WorkOrder
  getAllWorkOrders: [WorkOrder]

  getInventoryById(id: ID!): Inventory
  getAllInventories: [Inventory]
}

type Mutation {
  login(loginInput: LoginInput): AuthResponse
  register(registerInput: RegisterInput): AuthResponse

  createProduct(productInput: ProductInput): Product
  updateProduct(id: ID, productInput: ProductInput): Product
  deleteProductById(id: ID): String

  createPurchase(purchaseInput: PurchaseInput): Purchase
  updatePurchase(id: ID, purchaseInput: PurchaseInput): Purchase
  deletePurchaseById(id: ID): String

  createDetailPurchase(detailPurchaseInput: DetailPurchaseInput): DetailPurchase
  updateDetailPurchase(
    id: ID
    detailPurchaseInput: DetailPurchaseInput
  ): DetailPurchase
  deleteDetailPurchaseById(id: ID): String

  createSupplier(supplierInput: SupplierInput): Supplier
  updateSupplier(id: ID, supplierInput: SupplierInput): Supplier
  deleteSupplierById(id: ID): String

  createClient(clientInput: ClientInput): Client
  updateClient(id: ID!, clientInput: ClientInput): Client
  deleteClientById(id: ID!): String

  createSale(saleInput: SaleInput): Sale
  updateSale(id: ID!, saleInput: SaleInput): Sale
  deleteSaleById(id: ID!): String

  createWorkOrder(workOrderInput: WorkOrderInput): WorkOrder
  updateWorkOrder(id: ID!, workOrderInput: WorkOrderInput): WorkOrder
  deleteWorkOrderById(id: ID!): String

  createInventory(inventoryInput: InventoryInput): Inventory
  updateInventory(id: ID!, inventoryInput: InventoryInput): Inventory
  deleteInventoryById(id: ID!): String

  createWarehouse(warehouseInput: WarehouseInput): Warehouse
  updateWarehouse(id: ID!, warehouseInput: WarehouseInput): Warehouse
  deleteWarehouseById(id: ID!): String
}

type Usuario {
  id: ID
  username: String
  password: String
  isEnabled: Boolean
  accountNoExpired: Boolean
  accountNoLocked: Boolean
  credentialNoExpired: Boolean
  role: Role
}

type Role {
  id: ID
  roleName: RoleEnum
  permissions: [Permission]
}

enum RoleEnum {
  ADMIN
  USER
  INVITED
  DEVELOPER
}

type Permission {
  id: ID
  name: String
}

type AuthResponse {
  id: ID
  username: String
  message: String
  token: String
  status: Boolean
}

type Product {
  id: ID
  name: String
  price: Float
  imageUrl: String
  description: String
}

input ProductInput {
  name: String
  price: Float
  imageUrl: String
  description: String
}

type Purchase {
  id: ID
  idSupplier: String
  precioTotal: Float
}
input PurchaseInput {
  idSupplier: String
  precioTotal: Float
}

type DetailPurchase {
  id: ID
  idProducto: String
  cantidad: Int
  precioProducto: Float
}

input DetailPurchaseInput {
  idProducto: String
  cantidad: Int
  precioProducto: Float
}

type Supplier {
  id: String
  name: String
  nit: String
  phone: String
}
input SupplierInput {
  name: String
  nit: String
  phone: String
}

input LoginInput {
  username: String
  password: String
}

input RegisterInput {
  username: String
  password: String
  roleRequest: String
}

type Client {
  id: ID
  name: String
  nit: String
  phone: String
}

input ClientInput {
  name: String
  nit: String
  phone: String
}


type Sale {
  id: ID
  clientId: String
  totalPrice: Float
}

input SaleInput {
  clientId: String
  totalPrice: Float
}

type SaleDetail {
  id: ID
  saleId: String
  productId: String
  quantity: Int
  productPrice: Float
  workOrderId: String
}

input SaleDetailInput {
  saleId: String
  productId: String
  quantity: Int
  productPrice: Float
  workOrderId: String
}

type WorkOrder {
  id: String
  description: String
}

input WorkOrderInput {
  description: String
}

type Warehouse {
  id: ID
  name: String
  location: String
  phone: String
}
input WarehouseInput {
  name: String
  location: String
  phone: String
}

type Inventory {
  id: String
  warehouseId: String
  productId: String
  quantity: Int
  section: String
}
input InventoryInput {
  warehouseId: String
  productId: String
  quantity: Int
  section: String
}